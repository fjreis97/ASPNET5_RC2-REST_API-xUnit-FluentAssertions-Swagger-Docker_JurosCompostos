# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '4c040102-b37b-41ec-a998-fbb1a62fa358'
  imageRepository: 'apifinancas'
  containerRegistry: 'meurprimeirocontainer.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'meurprimeirocontainer1310b6bb-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Tests
  displayName: Tests stage
  jobs:
  - job: Tests
    displayName: Testes da API REST
    pool:
      vmImage: $(vmImageName)
    steps: 
      - script: DotNetCoreCLI@2
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: '**/APIFinancas.Testes/APIFinancas.Testes.csproj'
          testRunTitle: 'Testes da API de Juros compostos'

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps: 
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)
          latest

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'fjreis97ASPNET5RC2RESTAPIxUnitFluentAssertionsSwaggerDockerJurosCompostos-1081.myfirstpipeline'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

